/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package storybook.ui.jasperreports;

import java.awt.event.ItemEvent;
import java.io.File;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import javax.swing.JFileChooser;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;

import org.apache.commons.io.FileUtils;
import org.hibernate.Session;
import org.hibernate.jdbc.Work;

import storybook.SbConstants;
import storybook.StorybookApp;
import storybook.model.BookModel;
import storybook.model.hbn.entity.Internal;
import storybook.toolkit.DocumentUtil;
import storybook.toolkit.EnvUtil;
import storybook.toolkit.I18N;
import storybook.toolkit.swing.SwingUtil;
import storybook.ui.MainFrame;

/**
 *
 * @author favdb
 */
public class dlgExportPrint extends javax.swing.JDialog {
	private MainFrame mainFrame;
	private static List<ExportReport> reports;
	private static JasperPrint jasperPrint;
	private static HashMap<String, String> formatMap;
	private Object format;
	private ExportPreview previewPanel;
	private ExportReport report=null;
	private boolean initialisation=true;

	/**
	 * Creates new form dlgExportPrint
	 * @param parent : parent frame
	 * @param modal : true or false
	 */
	public dlgExportPrint(java.awt.Frame parent, boolean modal) {
		super(parent, modal);
		initComponents();
		initUI();
	}
	
	public dlgExportPrint(MainFrame parent) {
		super(parent, true);
		reports = new ArrayList();
		reports.add(new ExportReport("person_list", "msg.jasper.person.list"));
		reports.add(new ExportReport("location_list", "msg.jasper.location.list"));
		reports.add(new ExportReport("tag_list", "msg.jasper.tag.list"));
		reports.add(new ExportReport("item_list", "msg.jasper.item.list"));
		reports.add(new ExportReport("idea_list", "msg.jasper.idea.list"));
		reports.add(new ExportReport("summary", "msg.jasper.book.summary"));
		reports.add(new ExportReport("csv_person_list", "msg.jasper.csv.person.list"));
		reports.add(new ExportReport("csv_location_list", "msg.jasper.csv.location.list"));
		reports.add(new ExportReport("csv_tag_list", "msg.jasper.csv.tag.list"));
		reports.add(new ExportReport("csv_item_list", "msg.jasper.csv.item.list"));
		reports.add(new ExportReport("csv_idea_list", "msg.jasper.csv.idea.list"));
		reports.add(new ExportReport("csv_summary", "msg.jasper.csv.book.summary"));
		formatMap = new HashMap();
		formatMap.put("pdf", "PDF");
		formatMap.put("html", "HTML");
		formatMap.put("csv", "CSV (comma-separated values)");
		formatMap.put("text", "Text (UTF-8)");
		formatMap.put("rtf", "RTF (Rich Text Format)");
		formatMap.put("odt", "ODT (OpenDocument Text)");
		initComponents();
		mainFrame=parent;
		initUI();
		initialisation=false;
	}
	
	private void initUI() {
		Internal internal = DocumentUtil.restoreInternal(mainFrame,
				SbConstants.InternalKey.EXPORT_DIRECTORY, EnvUtil.getDefaultExportDir(mainFrame));
		txFolder.setText(internal.getStringValue());
		if (txFolder.getText().isEmpty())
			txFolder.setText(FileUtils.getUserDirectoryPath());
		cbReport.removeAllItems();
		for (ExportReport zreport : reports) {
			cbReport.addItem(zreport);
		}
		cbReport.setSelectedIndex(0);
		//String []formatMap = {"pdf","html","csv","text","rtf","odt"};
		cbFormat.removeAllItems();
		for (String zformat : formatMap.keySet()) {
			cbFormat.addItem(zformat);
		}
		cbFormat.setSelectedIndex(0);
		previewPanel=new ExportPreview(null);
		panePreview.add(previewPanel);
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
	 * content of this method is always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txFolder = new javax.swing.JTextField();
        btFolder = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        cbReport = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        cbFormat = new javax.swing.JComboBox();
        panePreview = new javax.swing.JPanel();
        btEnlarge = new javax.swing.JButton();
        btExport = new javax.swing.JButton();
        btClose = new javax.swing.JButton();
        btRefresh = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("storybook/resources/messages"); // NOI18N
        setTitle(bundle.getString("msg.dlg.export.title")); // NOI18N
        setResizable(false);

        jLabel1.setText(bundle.getString("msg.dlg.export.folder")); // NOI18N

        txFolder.setText("jTextField1");

        btFolder.setText(bundle.getString("msg.common.choose.folder")); // NOI18N
        btFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btFolderActionPerformed(evt);
            }
        });

        jLabel2.setText(bundle.getString("msg.dlg.export.report")); // NOI18N

        cbReport.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbReportItemStateChanged(evt);
            }
        });

        jLabel3.setText(bundle.getString("msg.dlg.export.format")); // NOI18N

        cbFormat.setSelectedItem("pdf");
        cbFormat.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbFormatItemStateChanged(evt);
            }
        });

        panePreview.setBackground(new java.awt.Color(248, 155, 61));

        javax.swing.GroupLayout panePreviewLayout = new javax.swing.GroupLayout(panePreview);
        panePreview.setLayout(panePreviewLayout);
        panePreviewLayout.setHorizontalGroup(
            panePreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 349, Short.MAX_VALUE)
        );
        panePreviewLayout.setVerticalGroup(
            panePreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        btEnlarge.setText(bundle.getString("msg.dlg.export.enlarge.preview")); // NOI18N
        btEnlarge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEnlargeActionPerformed(evt);
            }
        });

        btExport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/storybook/resources/icons/16x16/export.png"))); // NOI18N
        btExport.setText(bundle.getString("msg.common.export")); // NOI18N
        btExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExportActionPerformed(evt);
            }
        });

        btClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/storybook/resources/icons/16x16/close.png"))); // NOI18N
        btClose.setText(bundle.getString("msg.common.close")); // NOI18N
        btClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCloseActionPerformed(evt);
            }
        });

        btRefresh.setText(bundle.getString("msg.dlg.export.refresh.preview")); // NOI18N
        btRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbReport, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbFormat, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txFolder))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 51, Short.MAX_VALUE)
                                .addComponent(panePreview, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btFolder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btEnlarge, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btExport, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btClose, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btRefresh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(txFolder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cbReport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(cbFormat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btEnlarge)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btRefresh)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btExport)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btClose))
                    .addComponent(panePreview, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(btFolder)
                .addGap(473, 473, 473))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btFolderActionPerformed
        // TODO btFolderActionPerformed
		JFileChooser chooser = new JFileChooser(txFolder.getText());
		chooser.setFileSelectionMode(1);
		int i = chooser.showOpenDialog(this);
		if (i != 0) return;
		File file = chooser.getSelectedFile();
		txFolder.setText(file.getAbsolutePath());
    }//GEN-LAST:event_btFolderActionPerformed

    private void btEnlargeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEnlargeActionPerformed
        // TODO btEnlargeActionPerformed
    }//GEN-LAST:event_btEnlargeActionPerformed

    private void btExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExportActionPerformed
        // TODO btExportActionPerformed
    }//GEN-LAST:event_btExportActionPerformed

    private void btCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCloseActionPerformed
        DocumentUtil.storeInternal(mainFrame, SbConstants.InternalKey.EXPORT_DIRECTORY, txFolder.getText());
		dispose();
    }//GEN-LAST:event_btCloseActionPerformed

    private void cbReportItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbReportItemStateChanged
		if (evt.getStateChange()==ItemEvent.SELECTED) {
			ExportReport xrep=(ExportReport)evt.getItem();
			report=xrep;
			//refreshReport(report);
			System.out.println(evt.getItem().toString());
		}
		
    }//GEN-LAST:event_cbReportItemStateChanged

    private void cbFormatItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbFormatItemStateChanged
		if (evt.getStateChange()==ItemEvent.SELECTED) {
			// TODO change export format
		}
    }//GEN-LAST:event_cbFormatItemStateChanged

    private void btRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRefreshActionPerformed

    }//GEN-LAST:event_btRefreshActionPerformed

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException | InstantiationException | IllegalAccessException 
				| javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(dlgExportPrint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
        //</editor-fold>

		/* Create and display the dialog */
		java.awt.EventQueue.invokeLater(new Runnable() {
			@Override
			public void run() {
				dlgExportPrint dialog = new dlgExportPrint(new javax.swing.JFrame(), true);
				dialog.addWindowListener(new java.awt.event.WindowAdapter() {
					@Override
					public void windowClosing(java.awt.event.WindowEvent e) {
						System.exit(0);
					}
				});
				dialog.setVisible(true);
			}
		});
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btClose;
    private javax.swing.JButton btEnlarge;
    private javax.swing.JButton btExport;
    private javax.swing.JButton btFolder;
    private javax.swing.JButton btRefresh;
    private javax.swing.JComboBox cbFormat;
    private javax.swing.JComboBox cbReport;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel panePreview;
    private javax.swing.JTextField txFolder;
    // End of variables declaration//GEN-END:variables

	public void fillReport(final ExportReport param) {
		BookModel model = mainFrame.getDocumentModel();
		Session session = model.beginTransaction();
		session.doWork(new Work() {
			@Override
			public void execute(Connection connection) throws SQLException {
				try {
					String str = "jasperreports" + File.separator + param.getJasperReportName() + ".jasper";
					HashMap localHashMap = new HashMap();
					localHashMap.put("PARAM_TITLE", param.getName() 
							+ " - " 
							+ I18N.getMsg("msg.common.project")
							+ ": \"" +mainFrame.getDbFile().getName() + "\"");
					localHashMap.put("SUBREPORT_DIR", "jasperreports" + File.separator);
					JasperFillManager.fillReport(str, localHashMap, connection);
				} catch (JRException e) {
					StorybookApp.error("ExportManager.fillReport("+param.getName()+")", e);
				}
			}
		});
		model.commit();
	}

	private void preview() {
		try {
			SwingUtil.setWaitingCursor(this);
			ExportManager xpManager = new ExportManager(mainFrame);
			xpManager.fillReport((ExportReport) cbReport.getSelectedItem());
			previewPanel.loadReport(xpManager.getJasperPrint());
			SwingUtil.setDefaultCursor(this);
		} catch (Exception exc) {
			StorybookApp.error("dlgExportPrint.preview()", exc);
		}
	}
	
	private void refreshReport(ExportReport xreport) {
		if (xreport==null) return;
		try {
			SwingUtil.setWaitingCursor(this);
			ExportManager xpManager = new ExportManager(mainFrame);
			xpManager.fillReport(xreport);
			previewPanel.loadReport(xpManager.getJasperPrint());
			SwingUtil.setDefaultCursor(this);
		} catch (Exception exc) {
			StorybookApp.error("dlgExportPrint.refresh()", exc);
		}

	}

}
